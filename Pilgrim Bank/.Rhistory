summary(mod2)
mod3 = lm(Retain ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200)
summary(mod3)
hist(mod3$fitted,nclass=50)
Retain
#--- PART 3 - ANALYZE retention with Logistic regression
glm.out = glm(Retain ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+
IncomeGiven+Tenure+District1100+District1200,family=binomial(logit))
summary(glm.out)
hist(glm.out$fitted.values,nclass=50)
plot(mod3$fitted, glm.out$fitted, xlab="Predicted OLS", ylab="Predicted logit")
#--- PART 4 - Demographics vs. Past profit to analyze profitability
mod1 = lm(Profit0 ~
Profit9+Online9+Tenure+District1100+District1200+factor(Age)+factor(Income))
summary(mod1)
mod2 = lm(Profit0 ~ Profit9+Online9+Tenure)
summary(mod2)
mod3 = lm(Profit0 ~ District1100+District1200+factor(Age)+factor(Income))
summary(mod3)
View(dtab)
Pilgrim = read.csv("pilgrimABC.csv")
Profit9=Pilgrim$X9Profit
Online9=Pilgrim$X9Online
Age=Pilgrim$X9Age
Income=Pilgrim$X9Inc
Tenure=Pilgrim$X9Tenure
District=Pilgrim$X9District
rm(list =ls())
Pilgrim = read.csv("pilgrimABC.csv")
Profit9=Pilgrim$X9Profit
Online9=Pilgrim$X9Online
Age=Pilgrim$X9Age
Income=Pilgrim$X9Inc
Tenure=Pilgrim$X9Tenure
District=Pilgrim$X9District
Profit0=Pilgrim$X0Profit
Online0=Pilgrim$X0Online
District1100 = ifelse(District==1100,1,0)
District1200 = ifelse(District==1200,1,0)
# account for missing demographics
AgeGiven = ifelse(is.na(Age),0,1)
AgeZero = ifelse(is.na(Age),0,Age)
IncomeZero = ifelse(is.na(Income),0,Income)
IncomeGiven = ifelse(is.na(Income),0,1)
sum(is.na(Online0))
sum(is.na(Profit0))
dim(Pilgrim)
which(is.na(Profit0) != is.na(Online0))
which(is.na(Profit0) < is.na(Online0))
which(is.na(Profit0) > is.na(Online0))
#--- ADD retain variable
Retain = ifelse(is.na(Profit0),0,1)
#commento sul fatto che se rimangono ci fanno guadagnare o perdere?
plot(Retain, Profit0)
sum(Profit0>0)
sum(Profit0[!is.na(Profit0)]>0)
sum(Profit0[!is.na(Profit0)]<0)
sum(Profit0[Profit0[!is.na(Profit0)]>0])
hist(Profit0)
hist(Profit0<2500)
hist(Profit0[Profit0<2500])
hist(Profit0[Profit0<2500 & Profit0>-2000])
sum(Profit0[Profit0<2500 & Profit0>0])
Profit0[!is.na(Profit0)]
Profit0ok = Profit0[!is.na(Profit0)]
sum(Profit0ok>0)
sum(Profit0ok[Profit0ok>0])
sum(Profit0ok[Profit0ok<0])
sum(Profit0ok)
sum(Profit0[Retain])
Profit0[Retain]
Profit0[!Retain]
Profit0
!is.na(Profit0)
Remain = !is.na(Profit0)
Profit[Remain]
Profit0[Remain]
plot(Online0,Retain)
hist(Profit0[Remain & Online0>Online9])
sum(Profit0[Remain & Online0>Online9])
sum(Profit0[Remain & Online0<Online9])
sum(Profit0[Remain & Online0==Online9 & Online0==1])
sum(Profit0[Remain & Online0==Online9 & Online0==0])
knitr::opts_chunk$set(echo = TRUE)
library(e1071)
set.seed(1)
Train=data_balanced_over
library(rpart)
library(ROSE)
Retain = as.factor(Retain)
library(e1071)
set.seed(1)
Train=data_balanced_over
#Andiamo a rinominare le variabili
Profit9=X9Profit
knitr::opts_chunk$set(echo = TRUE)
rm(list =ls())
set.seed(1)
Pilgrim = read.csv(file = "PilgrimABC.csv", header=T)
attach(Pilgrim)
dim(Pilgrim)
names(Pilgrim[, 1:9])
Profit=Pilgrim$X9Profit
Online=Pilgrim$X9Online
Age=Pilgrim$X9Age
Income=Pilgrim$X9Inc
Tenure=Pilgrim$X9Tenure
District=Pilgrim$X9District
head(Pilgrim)
summary(Profit)
hist(Profit)
N=length(Profit)
Nprofitable = sum(Profit>0)
cat('profitable = ', Nprofitable, ' out of ', N, '\n')
cumprofit=cumsum(sort(Profit,decreasing=TRUE))*100/sum(Profit)
plot(100*(1:N)/N,cumprofit,type='l')
grid()
cat('average profit ', mean(Profit), '\n')
ProfitOnline = Profit[Online==1]
cat('average profit ON', mean(ProfitOnline), '\n')
ProfitOffline = Profit[Online==0]
cat('average profit OFF', mean(ProfitOffline), '\n')
cat('Conf int profit ', t.test(Profit)$conf.int, '\n')
cat('p-value difference ',t.test(ProfitOnline,ProfitOffline)$p.value, '\n')
mod = lm(Profit ~ Online)
summary(mod)
Age1 = as.factor(Age)
summary(Age1)
mod = lm(Profit ~ Online+Age1)
summary(mod)
lapply(split(Profit,as.factor(Age)),mean)
lapply(split(Online,as.factor(Age)),mean)
sum(is.na(Age))
AgeGiven = ifelse(is.na(Age),0,1) # 0 dove c'è NA, 1 se c'è l'età
mod = lm(Profit ~ AgeGiven)
summary(mod)
AgeZero = ifelse(is.na(Age),0,Age)
table(AgeZero)
mod = lm(Profit ~ Online+AgeZero)
summary(mod)
mm = mean(Age, na.rm=TRUE)#non consideriamo i valori mancanti
AgeAverage = ifelse(is.na(Age),mm,Age)
table(AgeAverage)
mod = lm(Profit ~ Online+AgeAverage)
summary(mod)
mod = lm(Profit ~ Online+AgeZero+AgeGiven)
summary(mod)
mod = lm(Profit ~ Online+AgeAverage+AgeGiven)
summary(mod)
IncomeZero = ifelse(is.na(Income),0,Income)
IncomeGiven = ifelse(is.na(Income),0,1)
mod = lm(Profit ~ Online+AgeAverage+AgeGiven+IncomeZero+IncomeGiven)
summary(mod)
# Control for Tenure and district
any(is.na(District))
table(District)
District1100 = ifelse(District==1100,1,0)
District1200 = ifelse(District==1200,1,0)
any(is.na(Tenure))
mod = lm(Profit ~ Online+AgeAverage+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200)
summary(mod)
AgeCat = ifelse(is.na(Age)==TRUE,0,Age)
Age1=as.factor(AgeCat)
levels(Age1)
mod = lm(Profit ~ Online+Age1+IncomeZero+IncomeGiven+Tenure+District1100+District1200)
summary(mod)
#Andiamo a rinominare le variabili
Profit9=X9Profit
Online9=X9Online
Profit0=X0Profit
Online0=X0Online
mod1 = lm(Profit0 ~ Online9)
summary(mod1)
mod2 = lm(Profit0 ~ Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200)
summary(mod2)
mod3 = lm(Profit0 ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200)
summary(mod3)
plot(Profit9,Profit0)
cor(Profit9,Profit0,use="complete.obs")
sum(Profit0>5000,na.rm=TRUE)
c=which(Profit0>5000)
detach(Pilgrim)
data=Pilgrim[-c,]
attach(data)
Out_Profit9=X9Profit
Out_Online9=X9Online
Out_Age=X9Age
Out_Income=X9Inc
Out_Tenure=X9Tenure
Out_District=X9District
Out_Profit0=X0Profit
Out_Online0=X0Online
Out_District1100 = ifelse(Out_District==1100,1,0)
Out_District1200 = ifelse(Out_District==1200,1,0)
Out_AgeGiven = ifelse(is.na(Out_Age),0,1)
Out_AgeZero = ifelse(is.na(Out_Age),0,Out_Age)
Out_IncomeZero = ifelse(is.na(Out_Income),0,Out_Income)
Out_IncomeGiven = ifelse(is.na(Out_Income),0,1)
mod3 = lm(Out_Profit0 ~ Out_Profit9+Out_Online9+Out_AgeZero+Out_AgeGiven+Out_IncomeZero+Out_IncomeGiven+Out_Tenure+Out_District1100+Out_District1200)
summary(mod3)
mod4 = lm(Out_Profit0 ~ Out_Profit9+Out_Online9+Out_Tenure+Out_District1100+Out_District1200)
summary(mod4)
detach(data)
attach(Pilgrim)
c=which(Profit0>5000)
detach(Pilgrim)
data=Pilgrim[-c,]
attach(data)
Out_Profit9=X9Profit
Out_Online9=X9Online
Out_Age=X9Age
Out_Income=X9Inc
Out_Tenure=X9Tenure
Out_District=X9District
Out_Profit0=X0Profit
Out_Online0=X0Online
Out_District1100 = ifelse(Out_District==1100,1,0)
Out_District1200 = ifelse(Out_District==1200,1,0)
Out_AgeGiven = ifelse(is.na(Out_Age),0,1)
Out_AgeZero = ifelse(is.na(Out_Age),0,Out_Age)
Out_IncomeZero = ifelse(is.na(Out_Income),0,Out_Income)
Out_IncomeGiven = ifelse(is.na(Out_Income),0,1)
mod3 = lm(Out_Profit0 ~ Out_Profit9+Out_Online9+Out_AgeZero+Out_AgeGiven+Out_IncomeZero+Out_IncomeGiven+Out_Tenure+Out_District1100+Out_District1200)
summary(mod3)
mod4 = lm(Out_Profit0 ~ Out_Profit9+Out_Online9+Out_Tenure+Out_District1100+Out_District1200)
summary(mod4)
detach(data)
attach(Pilgrim)
Retain = ifelse(is.na(Profit0),0,1)
mod1 = lm(Retain ~ Online9)
summary(mod1)
mod2 = lm(Retain ~ Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200)
summary(mod2)
mod3 = lm(Retain ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200)
summary(mod3)
hist(mod3$fitted,nclass=50, main ="Histogrm of mod3")
summary(Profit0)
plot(Profit0)
m=which(Profit0<=-5000)
M=which(Profit0>=5000)
d=Pilgrim[-m,]
dtab=d[-M, ]
summary(dtab)
dim(dtab)
dtab
summary(Profit0)
plot(Profit0)
m=which(Profit0<=-5000)
M=which(Profit0>=5000)
d=Pilgrim[-m,]
dtab=d[-M, ]
detach(Pilgrim)
attach(dtab)
Out_Profit9=X9Profit
Out_Online9=X9Online
Out_Age=X9Age
Out_Income=X9Inc
Out_Tenure=X9Tenure
Out_District=X9District
Out_Profit0=X0Profit
Out_Online0=X0Online
Out_District1100 = ifelse(Out_District==1100,1,0)
Out_District1200 = ifelse(Out_District==1200,1,0)
Out_AgeGiven = ifelse(is.na(Out_Age),0,1)
Out_AgeZero = ifelse(is.na(Out_Age),0,Out_Age)
Out_IncomeZero = ifelse(is.na(Out_Income),0,Out_Income)
Out_IncomeGiven = ifelse(is.na(Out_Income),0,1)
Retain = ifelse(is.na(Out_Profit0),0,1)
detach(dtab)
attach(Pilgrim)
glm.out = glm(Out_Retain ~ Out_Profit9+Out_Online9+Out_AgeZero+Out_AgeGiven+Out_IncomeZero+
Out_IncomeGiven+Out_Tenure+Out_District1100+Out_District1200,family=binomial(logit))
Out_Retain = ifelse(is.na(Out_Profit0),0,1)
glm.out = glm(Out_Retain ~ Out_Profit9+Out_Online9+Out_AgeZero+Out_AgeGiven+Out_IncomeZero+
Out_IncomeGiven+Out_Tenure+Out_District1100+Out_District1200,family=binomial(logit))
summary(glm.out)
hist(glm.out$fitted.values,nclass=50, main="Histogram of Logistic Regression")
glm.out = glm(Retain ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+
IncomeGiven+Tenure+District1100+District1200,family=binomial(logit))
Retain = ifelse(is.na(Profit0),0,1)
mod1 = lm(Retain ~ Online9)
summary(mod1)
mod2 = lm(Retain ~ Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200)
summary(mod2)
glm.out = glm(Retain ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+
IncomeGiven+Tenure+District1100+District1200,family=binomial(logit))
summary(glm.out)
hist(glm.out$fitted.values,nclass=50, main="Histogram of Logistic Regression")
glm.out = glm(Out_Retain ~ Out_Profit9+Out_Online9+Out_AgeZero+Out_AgeGiven+Out_IncomeZero+
Out_IncomeGiven+Out_Tenure+Out_District1100+Out_District1200,family=binomial(logit))
summary(glm.out)
hist(glm.out$fitted.values,nclass=50, main="Histogram of Logistic Regression without outliers")
mod1 = lm(Profit0 ~
Profit9+Online9+Tenure+District1100+District1200+factor(Age)+factor(Income))
summary(mod1)
mod2 = lm(Profit0 ~ Profit9+Online9+Tenure)
summary(mod2)
mod3 = lm(Profit0 ~ District1100+District1200+factor(Age)+factor(Income))
summary(mod3)
data_balanced_over <- ovun.sample(as.factor(Retain) ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200, method = "over",N = 52792)$data
library(tree)
h.tree<-tree(as.factor(Retain) ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+
IncomeGiven+Tenure+District1100+District1200)
summary(h.tree)
plot(h.tree,lwd=3)
text(h.tree,pretty=0,cex=1.2,col="blue")
h.tree
setup<-tree.control(length(Retain), mincut = 2, minsize = 6, mindev = 0.0005)
h.tree<-tree(as.factor(Retain) ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+
IncomeGiven+Tenure+District1100+District1200,control=setup)
summary(h.tree)
plot(h.tree,lwd=3)
text(h.tree,pretty=0,cex=1.2,col="blue")
cv.hitters =cv.tree(h.tree)# ,FUN=prune.tree )
cv.hitters
plot(cv.hitters$size,cv.hitters$dev,type="b", lwd=3,col="blue",
xlab="Nodi terminali", ylab="RSS",main="Cost complexity pruning" )
prune.hitters=prune.tree(h.tree, best =10)
plot(prune.hitters,lwd=3)
text(prune.hitters ,pretty =0,cex=1.2,col="blue")
P1<-predict(prune.hitters)
P1<-data.frame(P1) ## semplicemente per osservare meglio
## cosa abbiamo nell'oggetto P1
head(P1)
library(rpart)
library(ROSE)
Retain = as.factor(Retain)
data_balanced_over <- ovun.sample(as.factor(Retain) ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200, method = "over",N = 52792)$data
setup<-tree.control(52792, mincut = 2, minsize = 6, mindev = 0.00003)
h.tree.balanced<-rpart(Retain ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200, data=data_balanced_over, control=setup)
summary(h.tree.balanced)
plot(h.tree.balanced,lwd=3)
text(h.tree.balanced,pretty=0,cex=1.2,col="blue")
pred.treebal <- predict(h.tree.balanced, newdata = data_balanced_over)
#summary(as.factor(Retain))
#data_balanced_over <- ovun.sample(as.factor(Retain) ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+
#  IncomeGiven+Tenure+District1100+District1200, method = "over",N = 5000)$data
#table(data_balanced_over$Retain)
library(e1071)
set.seed(1)
Train=data_balanced_over
svm_par=tune.svm(Retain~., data=Train, kernel="linear", gamma=10^(-1:1), cost=10^(-1:1), scale=TRUE)
```{r decision tree balanced}
sum(which(Online9=1))
sum(which(Online9==1))
sum(which(Online9==0))
dim(Pilgrim)
sum(which(Online9==1))
sum(which(Online9==0))
dim(Pilgrim)
count(which(Online9==1))
dim(Pilgrim)
ifelse(is.na(Out_Income),0,Out_Income)
sum(ifelse(Online9==1),1,0)
dim(Pilgrim)
sum(ifelse(Online9==1,1,0))
sum(which(Online9==0))
dim(Pilgrim)
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(ifelse(Online0==1,1,0))
sum(ifelse(Online0==0,1,0))
names(Pilgrims)
names(Pilgrim)
Online0
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(ifelse(Online0==1,1,0))
sum(ifelse(Online0==0,1,0))
sum(is.na(Online0),1, 0)
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(if(Online0==1),1)
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(if(Online0==1))
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(if(Online0==1)
sum(ifelse(Online0==0,1,0))
sum(is.na(Online0),1, 0)
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(if(Online0==1))
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(is.na(Online0),1, 0)
sum(if(Online0==1))
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(is.na(Online0),1, 0)
sum(ifelse(Online0==1,1,0))
sum(ifelse(Online0==0,1,0))
Online0[1]==1
Online0
Online0[2]==1
sum(is.na(Online0),1, 0)
Online0=ifelse(is.na(Online0),0,Online0)
Online0
sum(ifelse(Online0==1,1,0))
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(is.na(Online0),1, 0)
Online0=ifelse(is.na(Online0),3,Online0)
sum(ifelse(Online0==1,1,0))
sum(ifelse(Online0==0,1,0))
Online0
#Andiamo a rinominare le variabili
Profit9=X9Profit
Online9=X9Online
Profit0=X0Profit
Online0=X0Online
Online0
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(is.na(Online0),1, 0)
Online0b=ifelse(is.na(Online0),3,Online0)
sum(ifelse(Online0b==1,1,0))
sum(ifelse(Online0b==0,1,0))
sum(ifelse(Online9==1,1,0))
sum(ifelse(Online9==0,1,0))
sum(is.na(Online0),1, 0)-1
Online0b=ifelse(is.na(Online0),3,Online0)
sum(ifelse(Online0b==1,1,0))
sum(ifelse(Online0b==0,1,0))
library(rpart)
library(ROSE)
Retain = as.factor(Retain)
data_balanced_over <- ovun.sample(as.factor(Retain) ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200, method = "over",N = 52792)$data
setup<-tree.control(52792, mincut = 2, minsize = 6, mindev = 0.00003)
h.tree.balanced<-rpart(Retain ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+IncomeGiven+Tenure+District1100+District1200, data=data_balanced_over, control=setup)
summary(h.tree.balanced)
plot(h.tree.balanced,lwd=3)
text(h.tree.balanced,pretty=0,cex=1.2,col="blue")
pred.treebal <- predict(h.tree.balanced, newdata = data_balanced_over)
#summary(as.factor(Retain))
#data_balanced_over <- ovun.sample(as.factor(Retain) ~ Profit9+Online9+AgeZero+AgeGiven+IncomeZero+
#  IncomeGiven+Tenure+District1100+District1200, method = "over",N = 5000)$data
#table(data_balanced_over$Retain)
library(class)
set.seed(1)
Train.control=traniControl(method="repeatedcv", numbrer=10, repeats=3)
library(class)
set.seed(1)
Train.control=trainControl(method="repeatedcv", numbrer=10, repeats=3)
library(class)
library(boot)
set.seed(1)
Train=data_balanced_over
train.control=trainControl(method="repeatedcv", numbrer=10, repeats=3)
library(class)
library(caret)
set.seed(1)
Train=data_balanced_over
train.control=trainControl(method="repeatedcv", numbrer=10, repeats=3)
library(class)
library(boot)
library(caret)
set.seed(1)
Train=data_balanced_over
train.control=trainControl(method="repeatedcv", numbrer=10, repeats=3)
library(class)
library(boot)
library(caret)
set.seed(1)
Train=data_balanced_over
train.control=trainControl(method="repeatedcv", number=10, repeats=3)
fit=train(Retain~.,
method="knn",
tuneGrid=espand.grid(k=2:100),
trControl=train.control,
metric="Kappa",
data=Train
)
library(class)
library(boot)
set.seed(1)
Train=data_balanced_over
train.control=trainControl(method="repeatedcv", number=10, repeats=3)
fit=train(Retain~.,
method="knn",
tuneGrid=espand.grid(k=2:100),
trControl=train.control,
metric="Kappa",
data=Train
)
library(class)
library(boot)
set.seed(1)
Train=data_balanced_over
train.control=trainControl(method="repeatedcv", number=10, repeats=3)
fit=train(Retain~.,
method="knn",
tuneGrid=expand.grid(k=2:100),
trControl=train.control,
metric="Kappa",
data=Train
)
library(class)
library(boot)
set.seed(1)
Train=data_balanced_over
train.control=trainControl(method="repeatedcv", number=10, repeats=3)
fit=train(Retain~.,
method="knn",
tuneGrid=expand.grid(k=2:10),
trControl=train.control,
metric="Kappa",
data=Train
)
